{"version":3,"sources":["../index.js"],"names":["require","shell","cfg","load","inquirer","_","git2http","git","test","replace","argv","commandDir","demandCommand","usage","command","yargs","reset","option","default","core","username","description","help","alias","repository","indexOf","exec","owner","silent","code","stdout","stderr","console","log","exit","remotes","split","map","t","name","url","http","action","filter","remote","choice","prompt","type","message","choices","uniq","then","answers","cmd","echo","example","demand","epilog"],"mappings":"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","file":"index.js","sourcesContent":["\n'use strict';\n\nrequire('shelljs/global');\nvar shell = require('shelljs');\nvar cfg = require('home-config').load('.oschina');\nvar inquirer = require(\"inquirer\");\nvar _ = require('lodash');\n\nfunction git2http(git) {\n    if (!git) return git;\n    if (/^git\\@/.test(git)) return git.replace(\":\", \"/\").replace('git@', 'http://');\n    return git;\n}\n\nvar argv = require('yargs').commandDir('cmds').demandCommand().usage('$0 <cmd> [args]').command(\"clone [repository]\", \"clone repository from oschina\", function (yargs) {\n    return yargs.reset()\n    // .default({\n    // })\n    .option('owner', {\n        default: cfg.core.username,\n        description: 'specific repository owner'\n    })\n    // .demand('reposiotry', 'need specific [repository]')\n    .help(\"h\").alias(\"h\", \"help\");\n}, function (argv) {\n    var repository = argv.repository;\n    if (repository) if (repository.indexOf('/') > 0) {\n        exec('git clone git@git.oschina.net:' + repository);\n    } else {\n        exec('git clone git@git.oschina.net:' + argv.owner + '/' + repository);\n    }\n}).command('home', 'search repository', function (yargs) {\n    return yargs.reset().option('remote', {\n        default: 'origin',\n        description: 'specific remote name'\n    }).option('choice', {\n        description: 'use choice for multi remote'\n    }).help(\"h\").alias(\"h\", \"help\");\n}, function (argv) {\n    exec('git remote -v', { silent: true }, function (code, stdout, stderr) {\n        if (code !== 0) {\n            console.log(stderr);\n            shell.exit(1);\n            return;\n        }\n        var remotes = stdout.split('\\n');\n        var map = remotes.map(function (t) {\n            var split = t.split(/[\\ \\t]/);\n            return { name: split[0], url: split[1], http: git2http(split[1]), action: split[2] };\n        }).filter(function (t) {\n            return t.name;\n        });\n\n        var remote = map.filter(function (t) {\n            return t.name === argv.remote;\n        });\n        if (argv.choice) {\n            inquirer.prompt([{\n                type: \"list\",\n                name: \"remote\",\n                message: \"select remote to open?\",\n                choices: _.uniq(map.map(function (t) {\n                    return t.http;\n                }))\n            }]).then(function (answers) {\n                var cmd = 'open ' + git2http(answers.remote);\n                echo(cmd);\n                shell.exec(cmd);\n            });\n        } else {\n            var cmd = 'open ' + git2http(remote[0].url);\n            echo(cmd);\n            shell.exec(cmd);\n        }\n    });\n}).example('osc clone oschina-cli', 'clone repoistory from oschina').demand(1, 'Please specify a command').help('h').alias('h', 'help').epilog('copyright 2017').argv;\n//# sourceMappingURL=index.js.map"]}