{"version":3,"sources":["../index.js"],"names":["require","shell","cfg","load","inquirer","_","git2http","git","test","replace","argv","usage","command","yargs","reset","option","default","core","username","description","help","alias","repository","indexOf","exec","owner","demand","save","console","log","silent","code","stdout","stderr","exit","remotes","split","map","t","name","url","http","action","filter","remote","choice","prompt","type","message","choices","uniq","then","cmd","answers","echo","example","epilog"],"mappings":"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","file":"index.js","sourcesContent":["\nrequire('shelljs/global');\nconst shell = require('shelljs');\nconst cfg = require('home-config').load('.oschina');\nconst inquirer = require(\"inquirer\");\nconst _ = require('lodash');\n\nfunction git2http(git) {\n    if (!git) return git;\n    if (/^git\\@/.test(git))\n        return git.replace(\":\", \"/\").replace('git@', 'http://');\n    return git;\n}\n\nconst argv = require('yargs')\n    .usage('$0 <cmd> [args]')\n    .command(\"clone [repository]\", \"clone repository from oschina\",\n        yargs => yargs.reset()\n            // .default({\n            // })\n            .option('owner', {\n                default: cfg.core.username,\n                description: 'specific repository owner'\n            })\n            // .demand('reposiotry', 'need specific [repository]')\n            .help(\"h\")\n            .alias(\"h\", \"help\"),\n        argv => {\n            const repository = argv.repository;\n            if (repository)\n                if (repository.indexOf('/') > 0) {\n                    exec('git clone git@git.oschina.net:' + repository);\n                } else {\n                    exec('git clone git@git.oschina.net:' + argv.owner + '/' + repository);\n                }\n        })\n    .command('config', '',\n        yargs => {\n            return yargs.reset()\n                .command('set', 'set --key value',\n                    yargs => yargs.reset()\n                        .option(\"username\", {\n                            description: \"set username on oschina\"\n                        })\n                        .help(\"h\")\n                        .alias(\"h\", \"help\")\n                        .demand(1, ''),\n                    argv => {\n                        if (argv.username) {\n                            cfg.core = {\n                                username: argv.username\n                            };\n                            cfg.save();\n                            console.log('username is set to:' + argv.username);\n                            return\n                        }\n                    })\n                .command('get', 'get --key',\n                    yargs => yargs.reset()\n                        .option(\"username\", {\n                            description: \"get username on oschina\"\n                        })\n                        .demand(1, '')\n                        .help(\"h\")\n                        .alias(\"h\", \"help\"),\n                    argv => {\n                        if (argv.username) {\n                            console.log(cfg.core.username);\n                            return;\n                        }\n                    })\n                .demand(1, 'need set or get command');\n        },\n        argv => {\n            if (argv._[1] === 'set') {\n                cfg.core = {\n                    username: argv.username\n                };\n                cfg.save();\n                console.log('username is set to:' + argv.username);\n                return\n            }\n            if (argv._[1] === 'get') {\n                if (argv.username) {\n                    console.log(cfg.core.username);\n                    return;\n                }\n            }\n        }\n    )\n    .command('home', 'search repository',\n        yargs => yargs.reset()\n            .option('remote', {\n                default: 'origin',\n                description: 'specific remote name'\n            })\n            .option('choice', {\n                description: 'use choice for multi remote'\n            })\n            .help(\"h\")\n            .alias(\"h\", \"help\"),\n        argv => {\n            exec('git remote -v', {silent: true}, (code, stdout, stderr) => {\n                if (code !== 0) {\n                    console.log(stderr);\n                    shell.exit(1);\n                    return\n                }\n                const remotes = stdout.split('\\n');\n                const map = remotes.map(t => {\n                    const split = t.split(/[\\ \\t]/);\n                    return {name: split[0], url: split[1], http: git2http(split[1]), action: split[2]}\n                }).filter(t => t.name);\n\n                const remote = map.filter(t => t.name === argv.remote);\n                if (argv.choice) {\n                    inquirer\n                        .prompt([{\n                            type: \"list\",\n                            name: \"remote\",\n                            message: \"select remote to open?\",\n                            choices: _.uniq(map.map(t => t.http))\n                        }])\n                        .then(answers => {\n                            let cmd = 'open ' + git2http(answers.remote);\n                            echo(cmd);\n                            shell.exec(cmd)\n                        })\n                } else {\n                    let cmd = 'open ' + git2http(remote[0].url);\n                    echo(cmd);\n                    shell.exec(cmd)\n                }\n            })\n        })\n    .example('osc clone oschina-cli', 'clone repoistory from oschina')\n    .demand(1, 'Please specify a command')\n    .help('h')\n    .alias('h', 'help')\n    .epilog('copyright 2017')\n    .argv;\n\n\n"]}