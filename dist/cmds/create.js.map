{"version":3,"sources":["../../src/cmds/create.js"],"names":["cfg","exports","command","desc","builder","yargs","option","default","core","username","description","handler","echo","argv","owner","name","create_repository","data","repository_name","success","performRequest","access_token","org","private","endpoint","method","host","dataString","JSON","stringify","headers","length","options","path","body","console","log","req","request","res","setEncoding","responseString","on","responseObject","parse","write","end"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,MAAM,sBAAK,UAAL,CAAZ;;AAEAC,QAAQC,OAAR,GAAkB,eAAlB;AACAD,QAAQE,IAAR,GAAe,mBAAf;AACAF,QAAQG,OAAR,GAAkB;AAAA,WAASC,MAAMC,MAAN,CAAa,OAAb,EAAsB;AAC7CC,iBAASP,IAAIQ,IAAJ,CAASC,QAD2B;AAE7CC,qBAAa;AAFgC,KAAtB,CAAT;AAAA,CAAlB;AAIAT,QAAQU,OAAR,GAAkB,gBAAQ;AACtBC,SAAKC,KAAKC,KAAL,GAAa,GAAb,GAAmBD,KAAKE,IAA7B;AACA,QAAIF,KAAKE,IAAT,EAAe;AACXC,0BAAkBH,KAAKC,KAAvB,EAA8BD,KAAKE,IAAnC,EAAyC,UAAUE,IAAV,EAAgB;AACjDL,iBAAKK,IAAL;AACH,SAFL;AAIH;AACJ,CARD;;AAUA,SAASD,iBAAT,CAA2BF,KAA3B,EAAkCI,eAAlC,EAAmDC,OAAnD,EAA4D;AACxDP,SAAK,mBAAL;AACAQ,mBAAe,kBAAkBN,KAAlB,GAA0B,QAAzC,EAAmD,MAAnD,EAA2D;AACvDO,sBAAcrB,IAAIQ,IAAJ,CAASa,YADgC;AAEvDC,aAAKR,KAFkD;AAGvDC,cAAMG,eAHiD;AAIvDK,iBAAS;AAJ8C,KAA3D,EAKGJ,OALH;AAMH;;AAED,SAASC,cAAT,CAAwBI,QAAxB,EAAkCC,MAAlC,EAA0CR,IAA1C,EAAgDE,OAAhD,EAAyD;AACrD,QAAMO,OAAO,iBAAb;AACA,QAAMC,aAAaC,KAAKC,SAAL,CAAeZ,IAAf,CAAnB;AACA,QAAIa,UAAU,EAAd;;AAEA,QAAIL,WAAW,KAAf,EAAsB;AAClBD,oBAAY,MAAM,sBAAYK,SAAZ,CAAsBZ,IAAtB,CAAlB;AACH,KAFD,MAGK;AACDa,kBAAU;AACN,4BAAgB,kBADV;AAEN,8BAAkBH,WAAWI;AAFvB,SAAV;AAIH;AACD,QAAMC,UAAU;AACZN,cAAMA,IADM;AAEZO,cAAMT,QAFM;AAGZC,gBAAQA,MAHI;AAIZK,iBAASA;AAJG,KAAhB;AAMA,QAAIL,WAAW,KAAf,EAAsB;AAClBO,gBAAQE,IAAR,GAAeP,UAAf;AACH;AACDQ,YAAQC,GAAR,CAAYR,KAAKC,SAAL,CAAeG,OAAf,CAAZ;AACA,QAAMK,MAAM,gBAAMC,OAAN,CAAcN,OAAd,EAAuB,UAAUO,GAAV,EAAe;AAC9CA,YAAIC,WAAJ,CAAgB,OAAhB;;AAEA,YAAIC,iBAAiB,EAArB;;AAEAF,YAAIG,EAAJ,CAAO,MAAP,EAAe,UAAUzB,IAAV,EAAgB;AAC3BwB,8BAAkBxB,IAAlB;AACH,SAFD;;AAIAsB,YAAIG,EAAJ,CAAO,KAAP,EAAc,YAAY;AACtBP,oBAAQC,GAAR,CAAYK,cAAZ;AACA,gBAAME,iBAAiBf,KAAKgB,KAAL,CAAWH,cAAX,CAAvB;AACAtB,oBAAQwB,cAAR;AACH,SAJD;AAKH,KAdW,CAAZ;;AAgBAN,QAAIQ,KAAJ,CAAUlB,UAAV;AACAU,QAAIS,GAAJ;AACH","file":"create.js","sourcesContent":["import https from \"https\";\n\nimport querystring from \"querystring\";\nimport shelljs from \"shelljs/global\";\n\nimport {load} from \"home-config\";\n\nconst cfg = load('.oschina');\n\nexports.command = 'create [name]';\nexports.desc = 'create repository';\nexports.builder = yargs => yargs.option('owner', {\n    default: cfg.core.username,\n    description: 'specific owner'\n});\nexports.handler = argv => {\n    echo(argv.owner + '/' + argv.name);\n    if (argv.name) {\n        create_repository(argv.owner, argv.name, function (data) {\n                echo(data);\n            }\n        )\n    }\n};\n\nfunction create_repository(owner, repository_name, success) {\n    echo('create_repository')\n    performRequest('/api/v5/orgs/' + owner + '/repos', 'POST', {\n        access_token: cfg.core.access_token,\n        org: owner,\n        name: repository_name,\n        private: true,\n    }, success);\n}\n\nfunction performRequest(endpoint, method, data, success) {\n    const host = 'git.oschina.net';\n    const dataString = JSON.stringify(data);\n    let headers = {};\n\n    if (method === 'GET') {\n        endpoint += '?' + querystring.stringify(data);\n    }\n    else {\n        headers = {\n            'Content-Type': 'application/json',\n            'Content-Length': dataString.length\n        };\n    }\n    const options = {\n        host: host,\n        path: endpoint,\n        method: method,\n        headers: headers,\n    };\n    if (method !== 'GET') {\n        options.body = dataString;\n    }\n    console.log(JSON.stringify(options));\n    const req = https.request(options, function (res) {\n        res.setEncoding('utf-8');\n\n        let responseString = '';\n\n        res.on('data', function (data) {\n            responseString += data;\n        });\n\n        res.on('end', function () {\n            console.log(responseString);\n            const responseObject = JSON.parse(responseString);\n            success(responseObject);\n        });\n    });\n\n    req.write(dataString);\n    req.end();\n}"]}