{"version":3,"sources":["../../src/cmds/list.js"],"names":["cfg","exports","command","desc","builder","yargs","option","default","core","username","description","handler","echo","argv","owner","list_repository","data","success","performRequest","access_token","type","page","per_page","endpoint","method","host","dataString","JSON","stringify","headers","length","options","path","console","log","req","request","res","setEncoding","responseString","on","responseObject","parse","write","end"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA,IAAMA,MAAM,sBAAK,UAAL,CAAZ;AACAC,QAAQC,OAAR,GAAkB,MAAlB;AACAD,QAAQE,IAAR,GAAe,mBAAf;AACAF,QAAQG,OAAR,GAAkB;AAAA,WAASC,MAAMC,MAAN,CAAa,OAAb,EAAsB;AAC7CC,iBAASP,IAAIQ,IAAJ,CAASC,QAD2B;AAE7CC,qBAAa;AAFgC,KAAtB,CAAT;AAAA,CAAlB;AAIAT,QAAQU,OAAR,GAAkB,gBAAQ;AACtBC,SAAKC,KAAKC,KAAV;AACAC,oBAAgBF,KAAKC,KAArB,EAA4B,UAAUE,IAAV,EAAgB;AACxCJ,aAAKI,IAAL;AACH,KAFD;AAGH,CALD;;AAOA,SAASD,eAAT,CAAyBD,KAAzB,EAAgCG,OAAhC,EAAyC;AACrCC,mBAAe,kBAAkBJ,KAAlB,GAA0B,QAAzC,EAAmD,KAAnD,EAA0D;AACtDK,sBAAcnB,IAAIQ,IAAJ,CAASW,YAD+B;AAEtDC,cAAM,KAFgD;AAGtDC,cAAM,CAHgD;AAItDC,kBAAU;AAJ4C,KAA1D,EAKGL,OALH;AAMH;;AAED,SAASC,cAAT,CAAwBK,QAAxB,EAAkCC,MAAlC,EAA0CR,IAA1C,EAAgDC,OAAhD,EAAyD;AACrD,QAAMQ,OAAO,iBAAb;AACA,QAAMC,aAAaC,KAAKC,SAAL,CAAeZ,IAAf,CAAnB;AACA,QAAIa,UAAU,EAAd;;AAEA,QAAIL,WAAW,KAAf,EAAsB;AAClBD,oBAAY,MAAM,sBAAYK,SAAZ,CAAsBZ,IAAtB,CAAlB;AACH,KAFD,MAGK;AACDa,kBAAU;AACN,4BAAgB,kBADV;AAEN,8BAAkBH,WAAWI;AAFvB,SAAV;AAIH;AACD,QAAMC,UAAU;AACZN,cAAMA,IADM;AAEZO,cAAMT,QAFM;AAGZC,gBAAQA,MAHI;AAIZK,iBAASA;AAJG,KAAhB;AAMAI,YAAQC,GAAR,CAAYP,KAAKC,SAAL,CAAeG,OAAf,CAAZ;AACA,QAAMI,MAAM,gBAAMC,OAAN,CAAcL,OAAd,EAAuB,UAAUM,GAAV,EAAe;AAC9CA,YAAIC,WAAJ,CAAgB,OAAhB;;AAEA,YAAIC,iBAAiB,EAArB;;AAEAF,YAAIG,EAAJ,CAAO,MAAP,EAAe,UAAUxB,IAAV,EAAgB;AAC3BuB,8BAAkBvB,IAAlB;AACH,SAFD;;AAIAqB,YAAIG,EAAJ,CAAO,KAAP,EAAc,YAAY;AACtBP,oBAAQC,GAAR,CAAYK,cAAZ;AACA,gBAAME,iBAAiBd,KAAKe,KAAL,CAAWH,cAAX,CAAvB;AACAtB,oBAAQwB,cAAR;AACH,SAJD;AAKH,KAdW,CAAZ;;AAgBAN,QAAIQ,KAAJ,CAAUjB,UAAV;AACAS,QAAIS,GAAJ;AACH","file":"list.js","sourcesContent":["import https from \"https\";\n\nimport querystring from \"querystring\";\nimport shelljs from \"shelljs/global\";\n\nimport {load} from \"home-config\";\nconst cfg = load('.oschina');\nexports.command = 'list';\nexports.desc = 'list repositories';\nexports.builder = yargs => yargs.option('owner', {\n    default: cfg.core.username,\n    description: 'specific owner'\n});\nexports.handler = argv => {\n    echo(argv.owner);\n    list_repository(argv.owner, function (data) {\n        echo(data);\n    })\n};\n\nfunction list_repository(owner, success) {\n    performRequest('/api/v5/orgs/' + owner + '/repos', 'GET', {\n        access_token: cfg.core.access_token,\n        type: 'all',\n        page: 1,\n        per_page: 1000\n    }, success);\n}\n\nfunction performRequest(endpoint, method, data, success) {\n    const host = 'git.oschina.net';\n    const dataString = JSON.stringify(data);\n    let headers = {};\n\n    if (method === 'GET') {\n        endpoint += '?' + querystring.stringify(data);\n    }\n    else {\n        headers = {\n            'Content-Type': 'application/json',\n            'Content-Length': dataString.length\n        };\n    }\n    const options = {\n        host: host,\n        path: endpoint,\n        method: method,\n        headers: headers\n    };\n    console.log(JSON.stringify(options))\n    const req = https.request(options, function (res) {\n        res.setEncoding('utf-8');\n\n        let responseString = '';\n\n        res.on('data', function (data) {\n            responseString += data;\n        });\n\n        res.on('end', function () {\n            console.log(responseString);\n            const responseObject = JSON.parse(responseString);\n            success(responseObject);\n        });\n    });\n\n    req.write(dataString);\n    req.end();\n}"]}